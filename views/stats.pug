extends layout

block css
	link(rel='stylesheet' href='https://codepen.io/bartveneman/pen/YMmxde.css')

block content
	header
		h1 css-analytics.com
		p
			| by
			|
			a(href='https://www.projectwallace.com') Project Wallace

	a(href='/') Back to home

	if url
		p= url

	section
		h2 Summary
		.metrics
			ul.cards
				li
					h3 Filesize
					dl
						dt Raw bytes
						dd= stats['stylesheets.size']
				li
					h3 Rules
					dl
						dt Total
						dd= stats['rules.total']
				li
					h3 Selectors
					dl
						dt Total
						dd= stats['selectors.total']
				li
					h3 Declarations
					dl
						dt Total
						dd= stats['declarations.total']

	section
		h2 Complexity
		.metrics
			ul.cards
				li
					h3 Rules
					dl
						dt Total
						dd= stats['rules.total']
				li
					h3 Selectors
					dl
						dt Total
						dd= stats['selectors.total']
						dt Average selectors per rule
						dd= stats['rules.selectors.average']
						dt Maximum selectors per rule
						dd= stats['rules.selectors.max']
						dt Minimum selectors per rule
						dd= stats['rules.selectors.min']
				li
					h3 Selector identifiers
					dl
						dt Average per selector
						dd= stats['selectors.identifiers.average']
						dt Maximum per selector
						dd
							details
								summary= stats['selectors.identifiers.max.count']
								code= stats['selectors.identifiers.max.value']
				li
					h3 Declarations
					dl
						dt Total
						dd= stats['declarations.total']
						//- dt Average declarations per rule
						//- dd= stats['rules.declarations.average']
						//- dt Maximum declarations per rule
						//- dd= stats['rules.declarations.max']
						//- dt Minimum declarations per rule
						//- dd= stats['rules.declarations.min']
						dt Unique
						dd= stats['declarations.totalUnique']
				li
					h3 At-Rules
					dl
						dt Total @media queries
						dd= stats['atrules.mediaqueries.total']
						dt Total @supports
						dd= stats['atrules.supports.total']
				li
					h3 Browserhacks
					dl
						dt Total
						dd= stats['stylesheets.browserhacks.total']
						dt @media
						dd= stats['atrules.mediaqueries.browserhacks.total']
						dt @supports
						dd= stats['atrules.supports.browserhacks.total']
						dt Selector
						dd= stats['selectors.browserhacks.total']
						dt Properties
						dd= stats['properties.browserhacks.total']
						dt Values
						dd= stats['values.browserhacks.total']

	section
		h2 Performance
		.metrics
			ul.cards
				li
					h3 Filesize
					dl
						dt Raw bytes
						dd= stats['stylesheets.size']
				li
					h3 Rules
					dl
						dt Empty
						dd 0
				li
					h3 @import rules
					dl
						dt Total
						dd= stats['atrules.imports.total']
						dt Unique
						dd
							details
								summary= stats['atrules.imports.totalUnique']
								ol
									for importRule in stats['atrules.imports.unique']
										li
											code= importRule
				li
					h3 @font-face rules
					dl
						dt Total
						dd= stats['atrules.fontfaces.total']
						dt Unique
						dd
							details
								summary= stats['atrules.fontfaces.totalUnique']
								dl
									for fontFace in stats['atrules.fontfaces.unique']
										dt
											code= JSON.stringify(fontFace.value, null, 2)
										dd= fontFace.count

	section
		h2 Branding
		.metrics
			ul.cards
				li
					h3 Colors
					dl
						dt Total
						dd= stats['values.colors.total']
						dt Unique
						dd= stats['values.colors.totalUnique']
				li
					h3 Font-families
					dl
						dt Total
						dd= stats['values.fontfamilies.total']
						dt Unique
						dd= stats['values.fontfamilies.totalUnique']
				li
					h3 Font-sizes
					dl
						dt Total
						dd= stats['values.fontsizes.total']
						dt Unique
						dd= stats['values.fontsizes.totalUnique']
				li
					h3 Box-shadows
					dl
						dt Total
						dd= stats['values.boxshadows.total']
						dt Unique
						dd= stats['values.boxshadows.totalUnique']
				li
					h3 @keyframes
					dl
						dt Total
						dd= stats['atrules.keyframes.total']
						dt Unique
						dd= stats['atrules.keyframes.totalUnique']

			ul.sheets
				li
					h3 Colors
					//- - const totalCount = stats['values.colors.unique'].reduce((acc, curr) => (acc + curr.count), 0)
					//- - const height = 80
					//- svg(width=totalCount height=height viewbox=`0 0 ${totalCount} ${height}`)
					//- 	- let offset = 0
					//- 	for color in stats['values.colors.unique']
					//- 		- offset = offset + color.count
					//- 		rect(x=offset y=0 width=color.count height=height fill=color.value)
					dl.color-values
						for color in stats['values.colors.unique']
							.css-value.color-value
								dt.value
									code= color.value
								dd.count #{color.count} &times;
								dd.specimen
									svg(width=16 height=16 viewbox='0 0 16 16')
										rect(width=16 height=16 x=0 y=0 fill=color.value)
				li
					h3 Font-families
					dl
						for ff in stats['values.fontfamilies.unique']
							.css-value
								dt.value
									code= ff.value
								dd.count #{ff.count} &times;
								dd.specimen(style=`font-family: ${ff.value}; font-size: 2em;`) The quick brown fox jumps over the lazy dog
				li
					h3 Font-sizes
					dl
						for fontsize in stats['values.fontsizes.unique']
							.css-value
								dt.value
									code= fontsize.value
								dd.count #{fontsize.count} &times;
								dd.specimen(style=`font-size: ${fontsize.value}`) The quick brown fox jumps over the lazy dog

	//- pre= JSON.stringify(stats, null, 2)

	h2 CSS
	style
		| .raw-css { white-space: pre-wrap; overflow: hidden}
	pre.raw-css= css