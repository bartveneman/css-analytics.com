extends layout

block content
	link(rel='stylesheet' href='https://codepen.io/bartveneman/pen/YMmxde.css')

	header
		h1 css-analytics.com
		p
			| by
			|
			a(href='https://www.projectwallace.com') Project Wallace

	p(style='text-align: center')
		a(href='/') Back to home

	section
		h2 Summary
		.metrics
			ul.cards
				li
					h3 Filesize
					dl
						.stat
							dt Raw bytes
							dd= formatFileSize(stats['stylesheets.filesize.uncompressed.totalBytes'])
							dt Compressed (gzip)
							dd= formatFileSize(stats['stylesheets.filesize.compressed.gzip.totalBytes'])
							dt Compressed (brotli)
							dd= formatFileSize(stats['stylesheets.filesize.compressed.brotli.totalBytes'])
				li
					h3 Rules
					dl
						.stat
							dt Total
							dd= formatNumber(stats['rules.total'])
				li
					h3 Selectors
					dl
						.stat
							dt Total
							dd= formatNumber(stats['selectors.total'])
				li
					h3 Declarations
					dl
						.stat
							dt Total
							dd= formatNumber(stats['declarations.total'])

	section
		h2 Complexity
		.metrics
			ul.cards
				li
					h3 Rules
					dl
						.stat
							dt Total
							dd= formatNumber(stats['rules.total'])
				li
					h3 Selectors
					dl
						.stat
							dt Total
							dd= formatNumber(stats['selectors.total'])
						.stat
							dt Unique
							dd= formatNumber(stats['selectors.totalUnique'])
				li
					h3 Selectors per rule
					dl
						.stat
							dt Average
							dd= formatNumber(stats['rules.selectors.average'])
						.stat
							dt Maximum
							dd= formatNumber(stats['rules.selectors.max'])
						.stat
							dt Minimum
							dd= formatNumber(stats['rules.selectors.min'])
				li
					h3 Selector identifiers
					dl
						.stat
							dt Average per selector
							dd= formatNumber(stats['selectors.identifiers.average'])
						.stat
							dt Maximum per selector
							dd= formatNumber(stats['selectors.identifiers.max.count'])
				li
					h3 Selector types
					dl
						.stat
							dt ID selectors
							dd= formatNumber(stats['selectors.id.total'])
						.stat
							dt JS selectors
							dd= formatNumber(stats['selectors.js.total'])
						.stat
							dt Universal selectors
							dd= formatNumber(stats['selectors.universal.total'])
						.stat
							dt Accessibility selectors
							dd= formatNumber(stats['selectors.accessibility.total'])
				li
					h3 Declarations
					dl
						.stat
							dt Total
							dd= formatNumber(stats['declarations.total'])
						//- .stat
						//- dt Average declarations per rule
						//- dd= stats['rules.declarations.average']
						//- .stat
						//- dt Maximum declarations per rule
						//- dd= stats['rules.declarations.max']
						//- .stat
						//- dt Minimum declarations per rule
						//- dd= stats['rules.declarations.min']
						.stat
							dt Unique
							dd= formatNumber(stats['declarations.totalUnique'])
				li
					h3 At-Rules
					dl
						.stat
							dt Total @media queries
							dd= formatNumber(stats['atrules.mediaqueries.total'])
						.stat
							dt Total @supports
							dd= formatNumber(stats['atrules.supports.total'])
				li
					h3 Browserhacks
					dl
						.stat
							dt Total
							dd= formatNumber(stats['stylesheets.browserhacks.total'])
						.stat
							dt @media
							dd= formatNumber(stats['atrules.mediaqueries.browserhacks.total'])
						.stat
							dt @supports
							dd= formatNumber(stats['atrules.supports.browserhacks.total'])
						.stat
							dt Selector
							dd= formatNumber(stats['selectors.browserhacks.total'])
						.stat
							dt Properties
							dd= formatNumber(stats['properties.browserhacks.total'])
						.stat
							dt Values
							dd= formatNumber(stats['values.browserhacks.total'])

			ul.sheets
				li
					h3 Maximum selectors in 1 rule: #{formatNumber(stats['rules.selectors.max'])}
					dl.selectors
						for selector in stats['rules.selectors.maximum.value']
							.selector
								dt.value.is-selector
									code= selector
				li
					h3 Top specificity selectors
					dl.selectors
						for selector in stats['selectors.specificity.top']
							.selector
								dt.value.is-selector
									code= selector.value
				li
					h3 Top identifiers selectors
					dl.selectors
						for selector in stats['selectors.identifiers.top']
							.selector
								dt.value.is-selector
									code= selector.value
				if stats['selectors.id.total'] > 0
					li
						h3 ID selectors
						dl.selectors
							for selector in stats['selectors.id.unique']
								.selector
									dt.value.is-selector
										code= selector.value
									dd.count #{selector.count}&times;
				if stats['selectors.js.total'] > 0
					li
						h3 JS selectors
						dl.selectors
							for selector in stats['selectors.js.unique']
								.selector
									dt.value.is-selector
										code= selector.value
									dd.count #{selector.count}&times;
				if stats['selectors.universal.total'] > 0
					li
						h3 Universal selectors
						dl.selectors
							for selector in stats['selectors.universal.unique']
								.selector
									dt.value.is-selector
										code= selector.value
									dd.count #{selector.count}&times;
				if stats['selectors.accessibility.total'] > 0
					li
						h3 Accessibility selectors
						dl.selectors
							for selector in stats['selectors.accessibility.unique']
								.selector
									dt.value.is-selector
										code= selector.value
									dd.count #{selector.count}&times;
				if stats['atrules.mediaqueries.total'] > 0
					li
						h3 Media queries
						dl.selectors
							for mq in stats['atrules.mediaqueries.unique']
								.selector
									dt.value.is-selector
										code= mq.value
									dd.count #{mq.count}&times;


	section
		h2 Performance
		.metrics
			ul.cards
				li
					h3 Filesize
					dl
						.stat
							dt Raw bytes
							dd= formatFileSize(stats['stylesheets.size'])
				li
					h3 Rules
					dl
						.stat
							dt Empty
							dd= formatNumber(stats['rules.empty.total'])
				li
					h3 @import rules
					dl
						.stat
							dt Total
							dd= formatNumber(stats['atrules.imports.total'])
						.stat
							dt Unique
							dd= formatNumber(stats['atrules.imports.totalUnique'])
				li
					h3 @font-face rules
					dl
						.stat
							dt Total
							dd= formatNumber(stats['atrules.fontfaces.total'])
						.stat
							dt Unique
							dd= formatNumber(stats['atrules.fontfaces.totalUnique'])

			ul.sheets
				if stats['atrules.imports.total'] > 0
					li
						h3 @import rules
						dl.selectors
							for url in stats['atrules.imports.unique']
								.selector
									dt.value.is-selector
										code= url.value
									dd.count #{url.count} &times;
				if stats['atrules.fontfaces.total'] > 0
					li
						h3 @font-face rules
						dl.selectors
							for fontface in stats['atrules.fontfaces.unique']
								.selector
									dt.value.is-selector
										pre(style='overflow-x: hidden; white-space: pre-wrap; word-break: break-all; max-height: 300px; -webkit-overflow-scrolling: touch;')= JSON.stringify(fontface.value, null, 2)
									dd.count #{fontface.count}&times;

	section
		h2 Branding
		.metrics
			ul.cards
				li
					h3 Colors
					dl
						.stat
							dt Total
							dd= formatNumber(stats['values.colors.total'])
						.stat
							dt Unique
							dd= formatNumber(stats['values.colors.totalUnique'])
				li
					h3 Font-families
					dl
						.stat
							dt Total
							dd= formatNumber(stats['values.fontfamilies.total'])
						.stat
							dt Unique
							dd= formatNumber(stats['values.fontfamilies.totalUnique'])
				li
					h3 Font-sizes
					dl
						.stat
							dt Total
							dd= formatNumber(stats['values.fontsizes.total'])
						.stat
							dt Unique
							dd= formatNumber(stats['values.fontsizes.totalUnique'])
				li
					h3 Box-shadows
					dl
						.stat
							dt Total
							dd= formatNumber(stats['values.boxshadows.total'])
						.stat
							dt Unique
							dd= formatNumber(stats['values.boxshadows.totalUnique'])
				li
					h3 @keyframes
					dl
						.stat
							dt Total
							dd= formatNumber(stats['atrules.keyframes.total'])
						.stat
							dt Unique
							dd= formatNumber(stats['atrules.keyframes.totalUnique'])

			ul.sheets
				li
					h3 Colors
					- const unique = stats['values.colors.unique']
					- const colorBarWidth = 1000
					- const colorBarHeight = 160
					- let colorBarOffset = 0
					- const colorBarTotalCount = unique.reduce((total, color) => (total += color.count), 0)

					svg.colorbar(viewbox=`0 0 ${colorBarWidth} ${colorBarHeight}` width=colorBarWidth height=colorBarHeight preserveAspectRatio='none')
						rect(width=colorBarWidth height=(colorBarHeight / 2) fill='#fff' x=0 y=0)
						rect(width=colorBarWidth height=(colorBarHeight / 2) fill='#000' x=0 y=(colorBarHeight / 2))
						for color in unique
							- const width = color.count / colorBarTotalCount * colorBarWidth
							rect(x=colorBarOffset y=0 height=colorBarHeight width=width fill=formatSvgColor(color.value))
							- colorBarOffset += width

					dl.color-values
						for color in stats['values.colors.unique']
							.css-value.color-value
								dt.value
									code= color.value
								dd.count #{color.count}&times;
								dd.specimen
									svg(width=16 height=16 viewbox='0 0 16 16')
										path(d="M 0,0 16,16 0,16 z" fill="#000000")
										path(d="M 0,0 16,0 16,16 z" fill="#ffffff")
										rect(width=16 height=16 x=0 y=0 fill=formatSvgColor(color.value))
				li
					h3 Font-families
					dl
						for ff in stats['values.fontfamilies.unique']
							.css-value
								dt.value
									code= ff.value
								dd.count #{ff.count}&times;
								dd.specimen(style=`font-family: ${ff.value}; font-size: 2em;`) The quick brown fox jumps over the lazy dog
				li
					h3 Font-sizes
					dl
						for fontsize in stats['values.fontsizes.unique']
							.css-value
								dt.value
									code= fontsize.value
								dd.count #{fontsize.count}&times;
								dd.specimen(style=`font-size: ${fontsize.value}`) The quick brown fox jumps over the lazy dog
				li
					h3 Box-shadows
					dl
						for boxshadow in stats['values.boxshadows.unique']
							.css-value
								dt.value
									code= boxshadow.value
								dd.count #{boxshadow.count}&times;
								dd.box-shadows
									code.box-shadow.box-shadow--is-light(style=`box-shadow: ${boxshadow.value}`) #fff
									code.box-shadow.box-shadow--is-dark(style=`box-shadow: ${boxshadow.value}`) #000

	section
		h2 CSS
		style
			| .raw-css { white-space: pre-wrap; overflow-x: hidden; max-height: 300px; -webkit-overflow-scrolling: touch; grid-column: 1/-1;}
		pre.raw-css(style='grid-column: 1/-1;')= css